#ifndef INFINARIO_INFIANRIO_H
#define INFINARIO_INFIANRIO_H

#include "IwHTTP.h"

#include "s3eThread.h"

#include <string>
#include <sstream>
#include <queue>

namespace Infinario
{
	enum class ResponseStatus : char
	{
		Success = 0, // The request was sent and a response was successfully recieved.
		SendRequestError = 1, // The request wasn't sent.
		ReceiveHeaderError = 2, // The request was sent, but no response was recieved or an error occured when loading
								// the recieved data.
		RecieveBodyError = 3, // The request was sent and a response was recieved, but an error occured when loading
							  // the recieved data.
		KilledError = 4 // The Infinario class instance was destroyed before the request can be finalized.
						// In some cases the request could have already been sent to the Infinario server.
	};

	/**
	 * Defines the prototype for callback functions, which are used to handle server responses to requests or errors
	 * that may occur while processing a request.
	 *
	 * @param httpClient The CIwHTTP class instance used to send requests. Caution, this will be a NULL pointer if the
	 *   Infinario class instance was destroyed before the request could be finalized (responseStatus = KilledError).
	 * @param responseStatus A value indicating the state of the result of the request. For more information refer to
	 *   the ResponseStatus enum type's definition.
	 * @param responseBody The body of the response recieved from the Infinario server. If an error occured this may
	 *   contain either an empty string or an incomplete portion of the body sent by the server.
	 * @param userData Data passed through the callback method, make sure the data is valid (i.e. not deallocated)
	 *   before the callback is called.
	 */
	typedef void(*ResponseCallback)(const CIwHTTP *httpClient, const std::string &requestBody,
		const ResponseStatus responseStatus, const std::string &responseBody, void *userData);

	/**
	 * Defines the prototype for callback functions, which are used to indicate that all the queued requests have been
	 * finalized.
	 * 
	 * @param userData Data passed through the callback method, make sure the data is valid (i.e. not deallocated)
	 *   before the callback is called.
	 */
	typedef void(*EmptyRequestQueueCallback)(void *userData);

	/**
	 * Internal PoD class used to store information about queued requests.
	 */
	class Request
	{
	public:
		Request(const std::string &uri, const std::string &body, ResponseCallback callback, void *userData);

		std::string _uri;
		std::string _body;
		ResponseCallback _callback;
		void *_userData;
	};

	/**
	* Internal class used to schedule and manage requests.
	*/
	class RequestManager
	{
	public:
		RequestManager();
		~RequestManager();

		void SetProxy(const std::string &proxy);
		void ClearProxy();

		void SetEmptyRequestQueueCallback(EmptyRequestQueueCallback callback, void *userData = NULL);
		void ClearEmptyRequestQueueCallback();

		void Enqueue(const Request &request);
	private:
		static int32 RecieveHeader(void* systemData, void* userData);
		static int32 RecieveBody(void* systemData, void* userData);

		static const uint32 _bufferSize;

		void Execute();

		CIwHTTP *_httpClient;

		s3eThreadLock *_externalLock;
		s3eThreadLock *_internalLock;

		EmptyRequestQueueCallback _emptyRequestQueueCallback;
		void *_emptyRequestQueueUserData;

		bool _isRequestBeingProcessed;
		std::queue<Request> _requestsQueue;

		char *_buffer;
		uint32 _accumulatedBodyLength;
		std::stringstream _accumulatedBodyContent;
	};

	/**
	 * Main SDK class intended for use.
	 */
	class Infinario
	{
	public:
	    /**
		 * When tracking events and updating the player's information, the player needs to be somehow identified.
		 *
		 * The constructor generates a customerCookie, which is used to identify an anonymous player.
		 * A player is considered anonymous if the customerId argument is not supplied to the constructor or if an
		 * empty string is used as the customerId. The player remains anonymous until the identify method is called and
		 * a successfull response is recieved from the Infinario server. If a player is not anonymous, the
		 * customerCookie is ignored and his/her customerId is used instead for identification.
		 *
		 * The instance's lifetime must begin after all basic Marmalade initialization funtions (IwGxInit, IwUtilInit,
		 * etc.) have been called and end before all basic Marmalade termination functions (IwGxTerminate,
		 * IwUtilTerminate, etc.) are called. This is due to the internal memory managment changes within the Marmalade
		 * SDK created by these calls.
		 *
		 * @param projectToken A unique identifier for the project, generated by the Infinario server.
		 * @param customerId A unique identifier for the tracked player.
		 */
		Infinario(const std::string &projectToken, const std::string &customerId = std::string());
		
		/**
		 * Used to set a proxy through which all requests will be sent to the Infinario server.
		 *
		 * @param proxy The proxy address (Example: "127.0.0.1:8888").
		 */
		void SetProxy(const std::string &proxy);

		/**
		 * Used to send requests directly again, after a proxy has been set.		 
		 */
		void ClearProxy();

		/**
		 * Sets a callback function to be called whenever all pending requests have been finalized. If there is no
		 * request being currently processed, then the callback will not be called until at least one request is queued
		 * and then finalized.
		 *
		 * @param callback A function, which is called when all requests in the queue have been finalized.
		 * @param userData Data, which is sent as an argument to the callback function.
		 */
		void SetEmptyRequestQueueCallback(EmptyRequestQueueCallback callback, void *userData = NULL);

		/**
		 * Clears any callback function so that nothing is called when all pending requests have been finalized.
		 */
		void ClearEmptyRequestQueueCallback();

		/**
		 * Used to set a unique customerId for an anonymous player. The customerId is internally set only after a
		 * successfull response is recieved from the Infinario server. It is recommended to only call this method once.
		 *
		 * All request methods (including the identify method) are schedueled to be executed sequencially in the order
		 * in which they were called.
		 *
		 * If a callback function is supplied, it will be called when a response is recieved from the Infinario server,
		 * or if an error occurs. In case an error occurs, you may call the identify method again from within the
		 * callback function.
		 * 
		 * @param customerId A unique identifier for the tracked player.
		 * @param callback A function, which is called when a response is recieved or if an error occurs.
		 * @param userData Data, which is sent as an argument to the callback function.
		 */
		void Identify(const std::string &customerId, ResponseCallback callback = NULL, void *userData = NULL);

		/**
		 * Used to update information abbout the current player.
		 *
		 * All request methods (including the update method) are schedueled to be executed sequencially in the order
		 * in which they were called.
		 *
		 * If a callback function is supplied, it will be called when a response is recieved from the Infinario server,
		 * or if an error occurs.
		 *
		 * @param customerAttributes Contains the player's properties. This must be a valid JSON string.
		 * @param callback A function, which is called when a response is recieved or if an error occurs.
		 * @param userData Data, which is sent as an argument to the callback function.
		 */
		void Update(const std::string &customerAttributes, ResponseCallback callback = NULL, void *userData = NULL);

		/**
		 * Used to track an event for the current player. The event's timestamp is set to the current time, when the
		 * method was called.
		 *
		 * All request methods (including the track method) are schedueled to be executed sequencially in the order
		 * in which they were called.
		 *
		 * If a callback function is supplied, it will be called when a response is recieved from the Infinario server,
		 * or if an error occurs.
		 *
		 * @param eventName The title of the tracked event.
		 * @param eventAttributes Contains the event's properties. This must be a valid JSON string.
		 * @param callback A function, which is called when a response is recieved or if an error occurs.
		 * @param userData Data, which is sent as an argument to the callback function.
		 */
		void Track(const std::string &eventName, const std::string &eventAttributes,
			ResponseCallback callback = NULL, void *userData = NULL);

		/**
		 * Used to track an event for the current player. The event's timestamp is set manually.
		 *
		 * All request methods (including the track method) are schedueled to be executed sequencially in the order
		 * in which they were called.
		 *
		 * If a callback function is supplied, it will be called when a response is recieved from the Infinario server,
		 * or if an error occurs.
		 *
		 * @param eventName The title of the tracked event.
		 * @param eventAttributes Contains the event's properties. This must be a valid JSON string.
		 * @param timestamp A double UNIX timestamp in seconds (supports second fractions).
		 * @param callback A function, which is called when a response is recieved or when an error occurs.
		 * @param userData Data, which is sent as an argument to the callback function.
		 */
		void Track(const std::string &eventName, const std::string &eventAttributes, const double timestamp,
			ResponseCallback callback = NULL, void *userData = NULL);
	private:
		class IndentifyUserData
		{
		public:
			IndentifyUserData(Infinario &infinario, ResponseCallback callback, void *userData);

			Infinario &_infinario;
			ResponseCallback _callback;
			void *_userData;
		};
	
		static void IdentifyCallback(const CIwHTTP *httpClient, const std::string &requestBody,
			const ResponseStatus responseStatus, const std::string &responseBody, void *identifyUserData);
		
		static const std::string _requestUri;

		RequestManager _requestManager;

		const std::string _projectToken;

		std::string _customerCookie;
		std::string _customerId;
	};
}

#endif // INFINARIO_INFIANRIO_H